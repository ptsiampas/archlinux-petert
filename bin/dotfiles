#!/bin/bash

# Simplified color codes
colors=(RESTORE NC BLACK RED GREEN YELLOW BLUE PURPLE CYAN LIGHTGRAY LBLACK LRED LGREEN LYELLOW LBLUE LPURPLE LCYAN WHITE)
color_codes=('\033[0m' '\033[0m' '\033[00;30m' '\033[00;31m' '\033[00;32m' '\033[00;33m' '\033[00;34m' '\033[00;35m' '\033[00;36m' '\033[00;37m' '\033[01;30m' '\033[01;31m' '\033[01;32m' '\033[01;33m' '\033[01;34m' '\033[01;35m' '\033[01;36m' '\033[01;37m')
for ((i = 0; i < ${#colors[@]}; i++)); do
  declare "${colors[$i]}"="${color_codes[$i]}"
done
OVERWRITE='\e[1A\e[K'

# Emoji codes using variable substitution for color
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="\033[38;5;49m\xE2\x96\xB6${NC}" # Updated for consistency
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

# Log file location
DOTFILES_LOG="$HOME/.dotfiles.log"

set -e

# Define paths and repo
CONFIG_DIR="$HOME/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"
DOTFILE_REPO="https://github.com/ptsiampas/archlinux-petert.git"

# Functions to handle tasks and commands
function _task {
  if [[ -n $TASK ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _cmd {
  if ! eval "$@" > /dev/null 2>&1; then
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n      Command failed: $@\n\n"
    exit 1
  fi
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

# Distro-specific setup functions
function ubuntu_setup() {
  local packages=(ansible python3 python3-pip)
  local pip_packages=(watchdog)

  for pkg in "${packages[@]}"; do
    if ! dpkg -s "$pkg" >/dev/null 2>&1; then
      _task "Installing $pkg"
      _cmd "sudo apt-get update"
      _cmd "sudo apt-get install -y $pkg"
    fi
  done

  for pip_pkg in "${pip_packages[@]}"; do
    if ! pip3 list | grep -q "$pip_pkg"; then
      _task "Installing Python3 $pip_pkg"
      _cmd "pip3 install $pip_pkg"
    fi
  done
}

function arch_setup() {
  local packages=(ansible python-argcomplete python3 python-pip python-watchdog openssh)
  for pkg in "${packages[@]}"; do
    if ! pacman -Q "$pkg" >/dev/null 2>&1; then
      _task "Installing $pkg"
      _cmd "sudo pacman -Sy --noconfirm $pkg"
    fi
  done
  _task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_AU.UTF-8"
}

function update_ansible_galaxy() {
  local os=$1
  _task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml -r $DOTFILES_DIR/requirements/$os.yml"
  else
    _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml"
  fi
}

# Main setup flow
source /etc/os-release
_task "Loading Setup for detected OS: $ID"
case $ID in
  ubuntu)
    ubuntu_setup
    ;;
  arch)
    arch_setup
    ;;
  *)
    _task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  _task "Generating SSH keys"
  _cmd "mkdir -p $SSH_DIR && chmod 700 $SSH_DIR"
  _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C \"$USER@$HOSTNAME\""
  _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

if ! [[ -d "$DOTFILES_DIR" ]]; then
  _task "Cloning repository"
  _cmd "git clone --quiet $DOTFILE_REPO $DOTFILES_DIR"
else
  _task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

(cd "$DOTFILES_DIR" && update_ansible_galaxy $ID)

_task "Running playbook"; _task_done
if [[ -f $VAULT_SECRET ]]; then
  ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
  ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi

